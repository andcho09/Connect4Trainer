subprojects {
	apply plugin: 'java'

	repositories {
		mavenCentral()
	}

	// Shared properties
	project.version = '0.0.2-SNAPSHOT'

	java {
		sourceCompatibility = JavaVersion.VERSION_11
		targetCompatibility = JavaVersion.VERSION_11
	}
}

configure(subprojects.findAll {it.name != 'Connect4CoreApi'}) { Project project ->
	task awsInit {
		doFirst {
			if (!project.hasProperty('region')) {
				println "WARN: The custom property 'region' was not provided. Defaulting to 'ap-southeast-2'."
				project.ext.region = 'ap-southeast-2'
			} else {
				project.ext.region = region
			}

			if (region == 'ap-southeast-2') {
				project.ext.bucket = 'cloudformation-s3-bucket-<region>'
			} else if (region == 'us-east-1') {
				project.ext.bucket = 'cloudformation-s3-bucket-<alternate-region>'
			} else {
				throw new GradleException("ERROR: the region '" + region + "' isn't supported")
			}

			if (!project.hasProperty('debug')) {
				project.ext.debug = 'false'
			} else {
				project.ext.debug = debug
			}

			if (!project.hasProperty('xray')) {
				project.ext.xray = 'PassThrough'
			} else {
				if (xray == 'Active' || xray == 'active') {
					project.ext.xray = 'Active'
				}
			}

			project.ext.date = new Date().format('yyyy-MM-dd')
			project.ext.dateTime = new Date().format('yyyy-MM-dd-HHmm')

			if (xray == 'Active'){
				project.ext.template_path = "distributions/${archivesBaseName}-XRay-${version}.zip"
			} else {
				project.ext.template_path = "distributions/${archivesBaseName}-${version}.zip"
			}
			println template_path

			println "Using region=" + region + ", bucket=" + bucket + ", debug=" + debug + ", and xray=" + xray
		}

		// Since Exec doesn't do lazy evaluation, we lazily register a task that will do configure the tasks during the execution phase
		tasks.register("awsTaskConfigure") {
			dependsOn awsInit
		}

		tasks.named("awsTaskConfigure") {
			doFirst { // Use a doFirst so that the task is configured *after* awsInit has defined all the property values
				tasks.named("awsMungeTemplate").configure {
					filter { String line ->
						String newLine = line.replaceFirst(/CodeUri: build\/distributions\/Connect4.*/, "CodeUri: ${->template_path}")
						newLine = newLine.replaceFirst(/CodeUri: \.\.\//, "CodeUri: ../../")
						return newLine
					}
				}
				tasks.named("awsPackage").configure {
					args "cloudformation", "package", "--template-file", "$buildDir/template.yaml", "--output-template-file", "$buildDir/packaged-${->project.shortName}-template.yaml", "--s3-prefix", "connect4trainer-releases/${->project.shortName}-${->project.date}", "--force-upload", "--s3-bucket", "${->project.bucket}", "--region", "${->project.region}"
				}
				tasks.named("awsCpTemplate").configure {
					args "s3", "cp", "$buildDir/packaged-${->project.shortName}-template.yaml", "s3://${->project.bucket}/templates/"
				}
				tasks.named("awsChangeSet").configure {
					args "cloudformation", "create-change-set", "--stack-name", "${->project.group}Stack", "--change-set-name", "Change-${->project.dateTime}", "--template-url", "https://${->project.bucket}.s3.${->project.region}.amazonaws.com/templates/packaged-${->project.shortName}-template.yaml", "--capabilities", "CAPABILITY_IAM", "CAPABILITY_NAMED_IAM", "CAPABILITY_AUTO_EXPAND", "--parameters", "ParameterKey=DebugEnabled,ParameterValue=${->project.debug}", "ParameterKey=XRayEnabled,ParameterValue=${->project.xray}", "--tags", "Key=Project,Value=Connect4Trainer", "--region", "${->project.region}"
				}
			}
		}
	}

	task awsMungeTemplate(type: Copy, group: "Custom", description: "Sets up CloudFormation template file") {
		dependsOn tasks.named("awsTaskConfigure")
		from file("template.yaml")
		into file("$buildDir")
	}

	task awsPackage(type: Exec, group: "Custom", description: "CloudFormation package") {
		dependsOn tasks.named("awsTaskConfigure"), awsMungeTemplate
		executable 'aws'
	}

	task awsCpTemplate(type: Exec, group: "Custom", description: "Copy template to S3") {
		dependsOn tasks.named("awsTaskConfigure"), awsMungeTemplate, awsPackage
		executable 'aws'
	}

	task awsChangeSet(type: Exec, group: "Custom", description: "CloudFormation change-set") {
		dependsOn tasks.named("awsTaskConfigure"), awsMungeTemplate, awsPackage, awsCpTemplate
		executable 'aws'
		doLast {
			println "aws command for DEBUG: aws " + args.join(" ")
		}
	}
}
